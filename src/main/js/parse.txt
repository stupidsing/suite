# FAIL
echo 1 | (cd src/main/js && INTERPRET=1 node parse.js parse.js)

# OK
echo 1 | (cd src/main/js && EVALUATE=1 node parse.js parse.js)

# OK
(cd src/main/js && echo "require('fs').readFileSync('fs.js', 'utf8')" | EVALUATE=1 INTERPRET=1 node parse.js)

# OK
(cd src/main/js && echo "require('util').inspect({ a: [1], b: 'x' }, { depth: 9 })" | EVALUATE=1 INTERPRET=1 node parse.js)

# OK
echo "
let map = new Map();
map.set('key', 'value');
map.has('key') && map.get('key') === 'value'
" | EVALUATE=1 INTERPRET=1 node src/main/js/parse.js

# OK
echo "
Object.fromEntries(Object.entries({ a: 1, b: 2, c: 3, }))
" | EVALUATE=1 INTERPRET=1 node src/main/js/parse.js

# OK
echo "
[1, 2, 3, 4,].map(e => e + 1).slice(1, 3)
" | EVALUATE=1 INTERPRET=1 node src/main/js/parse.js

# OK
echo "
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0,].map(e => e + 1).filter(e => e % 2 === 0)
" | EVALUATE=1 INTERPRET=1 node src/main/js/parse.js

# OK
echo "
[1, 2,].includes(2) && [1.toString(),].concat([2.toString(),]).length === 2 && [1, 2, 3, 4,].slice(1, 3)
" | EVALUATE=1 INTERPRET=1 node src/main/js/parse.js

# OK
echo '
let fib;
fib = v => v <= 1 ? 1 : v * fib(v - 1);
fib(10)
' | EVALUATE=1 INTERPRET=1 node src/main/js/parse.js

# OK
echo '
let fib = [undefined,];
fib[0] = v => v <= 1 ? 1 : v * fib[0](v - 1);
fib[0](10)
' | EVALUATE=1 INTERPRET=1 node src/main/js/parse.js

# OK
echo '
console.log(JSON.stringify(process.env, undefined, undefined))
' | EVALUATE=1 INTERPRET=1 node src/main/js/parse.js

# OK
echo '
async a => await Promise.resolve(a + 3)
' | TYPE=1 node src/main/js/parse.js

# OK
echo '
let error = message => { throw new Error(message); };
error(3)
' | EVALUATE=1 node src/main/js/parse.js

# OK
echo '
let error = message => { throw new Error(message); };
error(3)
' | INTERPRET=1 node src/main/js/parse.js

# OK
echo '
let a = 3;
let l = v => v + a;
l(5)
' | EVALUATE=1 INTERPRET=1 node src/main/js/parse.js

# OK
(cd src/main/js && cat parse.js | node parse.js)
