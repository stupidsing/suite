-- there are few functions that might have side effects: call%i*
-- logs are theoretically 'invisible' to the execution environment, so they are
-- still considered pure.

---------------------------------------------------------------------------
data (Optional :t) over :t as None ~
data (Optional :t) over :t as (Value :t) ~
---------------------------------------------------------------------------
define call%i-t1 := (n^Ints -> any -> any) of skip-type-check (i => p0 => +call%i-t1_{i}_{p0}) ~
define call%i-t2 := (n^Ints -> any -> any -> any) of skip-type-check (i => p0 => p1 => +call%i-t2_{i}_{p0}_{p1}) ~
define call%i-t3 := (n^Ints -> any -> any -> any -> any) of skip-type-check (i => p0 => p1 => p2 => +call%i-t3_{i}_{p0}_{p1}_{p2}) ~
define call%i-v1 := (n^Ints -> any -> any) of skip-type-check (i => p0 => +call%i-v1_{i}_{p0}) ~
define call%i-v2 := (n^Ints -> any -> any -> any) of skip-type-check (i => p0 => p1 => +call%i-v2_{i}_{p0}_{p1}) ~
define call%i-v3 := (n^Ints -> any -> any -> any -> any) of skip-type-check (i => p0 => p1 => p2 => +call%i-v3_{i}_{p0}_{p1}_{p2}) ~
define compare := (:t => (:t, :t) -> number) of skip-type-check (a => b => +compare_{a}_{b}) ~
define cons := (:t => :t -> [:t] -> [:t]) of skip-type-check (head => tail => head; tail) ~
define first := (:a => :b => (:a, :b) -> :a) of skip-type-check (tuple => +pleft_{tuple}) ~
define get%i := (any -> n^Ints) of skip-type-check (name => +get%i_{name}) ~
define head := (:t => [:t] -> :t) of skip-type-check (list => +lhead_{list}) ~
define is-list := (:t => [:t] -> boolean) of skip-type-check (n => +is-list_{n}) ~
define is-pair := (:a => :b => (:a, :b) -> boolean) of skip-type-check (n => +is-pair_{n}) ~
define second := (:a => :b => (:a, :b) -> :b) of skip-type-check (tuple => +pright_{tuple}) ~
define tail := (:t => [:t] -> [:t]) of skip-type-check (list => +ltail_{list}) ~
---------------------------------------------------------------------------
define popen@ := ([string] -> string -> (number, [n^Chars], [n^Chars])) of
	atom:INTRN!MonadIntrinsics.popen | get%i | call%i-v2
~
define deep-seq := (:t => :t -> :t) of
	atom:INTRN!SeqIntrinsics.deepSeq | get%i | call%i-v1
~
define log := (:t => :t -> :t) of
	atom:INTRN!BasicIntrinsics.log1 | get%i | call%i-v1
~
define log2 := (:t => string -> :t -> :t) of
	atom:INTRN!BasicIntrinsics.log2 | get%i | call%i-v2
~
---------------------------------------------------------------------------
define and := x => y =>
	if x then y else false
~
define drop := n => list =>
	if (0 < n && is-list_{list})
	then (list | tail | drop_{n - 1})
	else list
~
define fix := f =>
	let x := f_{x} ~ x
~
define flip := f => x => y =>
	f_{y}_{x}
~
define fold-left := fun => init => -- possible for tail call optimization in eager mode
	case
	|| `$h; $t` => fold-left_{fun}_{fun_{init}_{h}}_{t}
	|| anything => init
~
define fold-right := fun => init => -- possible for short-circuit evaluation in lazy mode
	case
	|| `$h; $t` => fun_{h}_{fold-right_{fun}_{init}_{t}}
	|| anything => init
~
define greater := a => b =>
	if (b < a) then a else b
~
define id := v =>
	v
~
define invoke := f => x =>
	f_{x}
~
define iterate := f => init =>
	init | f | iterate_{f} | `init;`
~
define lesser := a => b =>
	if (b < a) then b else a
~
define lines :=
	case
	|| `$h; $t` =>
		let l1 := lines_{t} ~
		if (h != 10 && is-list_{l1})
		then (let `$p; $q` := l1 ~ (h; p); q)
		else ((h;); l1)
	|| anything => ()
~
define not := x =>
	if x then false else true
~
define optional := cond => value =>
	if cond then (Value value) else None
~
define or := x => y =>
	if x then true else y
~
define scan-left := fun => init =>
	case
	|| `$h; $t` => init; scan-left_{fun}_{fun_{init}_{h}}_{t}
	|| anything => init;
~
define scan-right := fun => init =>
	case
	|| `$h; $t` =>
		let r := scan-right_{fun}_{init}_{t} ~
		fun_{h}_{head_{r}}; r
	|| anything => init;
~
define take := n => list =>
	if (0 < n && is-list_{list})
	then (let `$h; $t` := list ~ t | take_{n - 1} | cons_{h})
	else ()
~
define take-drop := n => list =>
	if (0 < n && is-list_{list}) then
		let `$h; $t` := list ~
		let `$t1, $d1` := t | take-drop_{n - 1} ~
		(h; t1), d1
	else (, list)
~
define unfold-left :=
	define unfold-left0 :=
		list => fun => init =>
			if (fun_{init} = `Value ($init1, $elem)`)
			then (unfold-left0_{elem; list}_{fun}_{init1})
			else list
	~
	unfold-left0_{}
~
define unfold-right :=
	fun => init =>
		if (fun_{init} = `Value ($e, $init1)`)
		then (init1 | unfold-right_{fun} | cons_{e})
		else ()
~
define zip := fun => list0 => list1 =>
	unfold-right_{
		case
		|| `($h0; $t0), ($h1; $t1)` => Value (fun_{h0}_{h1}, (t0, t1))
		|| anything => None
	}_{list0, list1}
~
---------------------------------------------------------------------------
define append :=
	fold-right_{cons} | flip
~
define apply :=
	fold-right_{`.`}_{id}
~
define bisect := fun =>
	fold-right_{
		h => `$t0, $f0` =>
		if (fun_{h}) then ((h; t0), f0) else (t0, (h; f0))
	}_{(), ()}
~
define chunk := n =>
	unfold-right_{l => optional_{l != ()}_{take-drop_{n}_{l}}}
~
define erase-type := (any -> any) of
	skip-type-check id
~
define fold := fun => `$h; $t` =>
	fold-left_{fun}_{h}_{t}
~
define filter := fun =>
	fold-right_{
		item => list => if (fun_{item}) then (item; list) else list
	}_{}
~
define heads :=
	scan-left_{cons/}_{}
~
define length :=
	fold-left_{v => e => v + 1}_{0}
~
define map := fun =>
	fold-right_{cons . fun}_{}
~
define partition := fun =>
	fold-right_{
		e => `$l0, $l1` => if (fun_{e}) then ((e; l0), l1) else (l0, (e; l1))
	}_{(), ()}
~
define popen := command => in =>
	do (in | popen@_{command})
~
define replicate := flip_{e =>
	unfold-left_{i => optional_{i != 0}_{i - 1, e}}
} ~
define reverse :=
	fold-left_{cons/}_{}
~
define substring := start => end => list =>
	let len := length_{list} ~
	let s := if (0 <= start) then start else (len + start) ~
	let e := if (0 < end) then end else (len + end) ~
	list | take_{e} | drop_{s}
~
define tails :=
	scan-right_{cons}_{}
~
define take-while := fun =>
	fold-right_{h => if (fun_{h}) then (cons_{h}) else (t => ())}_{}
~
define transpose :=
	case
	|| `$c; $cs` => zip_{`;`}_{c}_{transpose_{cs}}
	|| anything => (define list := ((); list) ~ list)
~
define uniq :=
	fold-right_{item => list =>
		case
		|| (list = `item; $t`) list
		|| item; list
	}_{}
~
---------------------------------------------------------------------------
define concat :=
	fold-right_{append}_{}
~
define cross := fun => l1 => l2 =>
	l1 | map_{e1 => l2 | map_{e1 | fun}}
~
define get := n =>
	head . (tail | replicate_{n} | apply)
~
define maximum :=
	fold_{greater}
~
define merge := merger => list =>
	let len := length_{list} ~
	if (1 < len) then
		let `$list0, $list1` := take-drop_{len / 2}_{list} ~
		merger_{list0 | merge_{merger}}_{list1 | merge_{merger}}
	else list
~
define minimum :=
	fold_{lesser}
~
define range := start => end => inc =>
	unfold-right_{i => optional_{i < end}_{i, i + inc}}_{start}
~
define starts-with :=
	case
	|| `$sh; $st` =>
		case
		|| `sh; $t` => starts-with_{st}_{t}
		|| anything => false
	|| anything => anything => true
~
define split := separator =>
	map_{take-while_{`!= separator`} . tail}
	. filter_{`= separator` . head}
	. filter_{not . `=`_{}}
	. tails . cons_{separator}
~
---------------------------------------------------------------------------
define contains := m =>
	fold-left_{or}_{false} . map_{m | starts-with} . tails
~
define ends-with := end =>
	starts-with_{end | reverse} . reverse
~
define group :=
	define group0 := list0 => list1 =>
		if (list0 = `$k0, $v0; $t0`) then
			if (list1 = `$k1, $v1; $t1`) then
				case
				|| (k0 < k1) (k0, v0; group0_{t0}_{list1})
				|| (k1 < k0) (k1, v1; group0_{list0}_{t1})
				|| k0, append_{v0}_{v1}; group0_{t0}_{t1}
			else list0
		else list1
	~
	merge_{group0} . map_{`$k, $v` => k, (v;)}
~
define join := separator =>
	concat . map_{separator; | append/}
~
define quick-sort := cmp =>
	case
	|| `$pivot; $t` =>
		let `$l0, $l1` := partition_{cmp/_{pivot}}_{quick-sort_{cmp}_{t}} ~
		concat_{l0; (pivot;); l1;}
	|| anything => ()
~
define replace := s0 => s1 =>
	define l := length_{s0} ~
	define replace0 := s =>
		case
		|| (starts-with_{s0}_{s}) (s1 ++ (s | drop_{l} | replace0))
		|| (`$h; $t` = s) (h; replace0_{t})
		|| ()
	~
	replace0
~
---------------------------------------------------------------------------
define merge-sort :=
	concat . map_{second} . group . map_{v => v, v}
~
